#!/usr/bin/env python2.7

import argparse
from collections import OrderedDict
import os
import sys

try:
    from termcolor import colored
except ImportError:
    def colored(text, *args, **kwargs):
        return text

parser = argparse.ArgumentParser(
    description='Detect lines longer than 80 columns')
aa = parser.add_argument
aa(dest='files', metavar='files', nargs='*')
aa('-c', '--columns', dest='cols', type=int, default=80)
aa('-t', '--tab-width', dest='tabw', type=int, default=4)
aa('--no-color', dest='no_color', action='store_false')
args = parser.parse_args()

C = args.cols
labelFmt = '%s[%d]: ' # filename and line number

fileErrors = OrderedDict() # { filename -> errors }
# errors :: [(line number, obedient text, overflow text)]

errorColor = lambda s: colored(s, 'white', on_color='on_red')
validColor = lambda s: colored(s, 'green', attrs=['bold'])

def tabsToSpaces(line):
    return line.replace('\t', ' ' * args.tabw)

for f in args.files:
    if f in fileErrors:
        continue
    if not os.access(f, os.R_OK):
        print >> sys.stderr, 'Could not read file "%s"' % f
        continue

    fileErrors[f] = []
    for i, line in enumerate(open(f), 1):
        line = tabsToSpaces(line)

        if line[-1] == '\n':
            line = line[:-1]
        if len(line) > C:
            fileErrors[f].append((i, line[:C], errorColor(line[C:])))

someErrors = False
for f, errors in fileErrors.iteritems():
    # File heading
    if not errors:
        continue

    someErrors = True
    print errorColor('%s has lines exceeding %d columns:' % (f, C))

    # Some formatting: find the longest string in 'filename[line#]'
    labelMax = max(map(lambda (i, g, b): len(labelFmt % (f, i)), errors))
    for (i, good, bad) in errors:
        label = (labelFmt % (f, i)).ljust(labelMax)
        print '%s%s%s' % (label, good, bad)

    print

if someErrors:
    sys.exit(1)
sys.exit(0)

