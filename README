An implementation of cablast for protein sequences.

Description of compression algorithm
====================================
====================================

Definitions
===========
original sequence
  A complete FASTA sequence entry from the input.

reference sequence
  A complete FASTA sequence entry in the reference output FASTA file.
  A reference sequence need not correspond to an original sequence entry, but 
  it may.

link
  A data point that connects a reference sequence to an original sequence.
  It also contains a diff that when applied to the reference sequence yields 
  the original sequence.
  The connection is done by storing the index of the first residue of both the 
  reference and original sequence that are in alignment, along with the length 
  of each sequence.
  XXX: It seems like we could compute the length of the original sequence using 
  the diff.
  XXX: Depending upon our representation, the indices may need to contain a 
  residue index *and* an entry index. (Where the entry index corresponds to 
  either an entry in the output reference FASTA file or the input proteome 
  FASTA file.)

seed size
  The number of residues that make up each searchable discrete unit of 
  sequences. We anticipate a value between 3 and 5 will be suitable.
  Note that this value impacts memory exponentially. That is, if the seed size
  is n, then the length of the seed table is 20^n where each entry can contain 
  zero or more Location values.

Types
=====
Types are types used inside the Go source for the compression algorithm.

type Residue byte
  The ASCII character value for a particular amino acid.

type Reference []Residue
  A single slice of all residues in the reference database. This representation 
  was chosen since many parts of the algorithm call for arbitrarily slicing 
  across all residues in the "uniques database."

type ReferenceSeq []Residue
  Represents a single discrete entry in the reference database. (i.e., a single 
  entry in the output reference FASTA file.)
  Note that this should be a slice into a value of type Reference. (i.e., no 
  copies.)
  XXX: We may want a struct here instead if we need to encode more information.
  Namely, if we have a value of type ReferenceSeq, do we ever need to go back 
  and find the index of where it started in the context of the entire reference 
  database? (I think we can avoid this if we think of the "stream of residues" 
  as algorithmic convenience rather than a representation we want to expose.)

type Original []Residue
  This is the same as Reference, but represents a stream of residues from the 
  input proteom FASTA file.
  XXX: Its quite possible that the 'Reference' and 'Original' types should be 
  merged into one 'Stream' type where we have two different Stream values. But 
  I'm not sure yet.

type OriginalSeq []Residue
  Like ReferenceSeq, but for sequences from the original input FASTA file.

type Location int64
  Location encodes the index of the start of a seed in a value of type 
  Reference. The length of the seed is not encoded in the type since it is a 
  run-time constant.

type Seeds [][]Location
  Seeds is a slice of size 20^n where n is the seed size. Since each seed can 
  map to more than one Location, each entry in the seeds table is a slice of 
  Location values. The slice of Location values will grow dynamically as 
  needed. (An empty slice only uses a few bytes, so there is a low constant 
  factor impacting best-case memory consumption.)
  XXX: We need a bijective function that maps a slice of residues of length n 
  to an integer in the interval [0, n).

type Link struct {
  refSeqInd, refSeqStart, refSeqLen int
  orgSeqInd, orgSeqStart, orgSeqLen int
}
  A link corresponds to a connection between a reference sequence and an 
  original sequence. The information encoded in a value of this type should be 
  enough to generate a diff given a slice of reference sequences and a slice of 
  original sequences.

type Links []Link
  Links is the link table.
  XXX: This type may not be needed if it turns out that there are no (or few)
  interesting properties of a collection of Link values.

Input
=====
Proteome in FASTA format

Output
======
Reference sequence database in FASTA format

Links that connect an original sequence from the input proteome to a 
reference sequence in the generated reference FASTA file. It should also 
contain a diff that can be applied to the reference sequence that returns 
precisely the original sequence.
XXX: We can store this in a binary file and use Go's encoding/binary package to 
read and write it. But I propose we start with a simple CSV format first.

Algorithm
=========
This is an attempt at reformulating the algorithm described in the supplemental 
section of a draft of the 'Compressive genomics allows computational analysis 
to keep pace with genomic' paper in terms of the types and definitions 
described above.

Initialization
--------------
The Reference value needs to be initialized to some chunk of the input FASTA 
file. It is not immediately obvious how much we should use, but a good starting 
point is to simply use the first sequence. (We may adopt a heuristic and use 
the first N sequences or the first N residues.)

The Seeds slice should then be initialized by traversing each window of SEED 
SIZE residues in the Reference value, and adding each Location to the index 
corresponding to the residues comprising the window.

Start a pointer at the residue immediately following the initially consumed 
residues.

Consume Input
-------------
If current value of pointer greater than or equal to the length of the input,
end the program.

If INITIAL REFERENCE SIZE residues have been scanned from the input without a 
match, add all residues proceding the last match to the residue at the position 
pointed to by the pointer to the Reference value.
Then update Seeds slice to reflect the residues added to the Reference value.
Keep the pointer the same.(XXX: - some?)
Go to Consume Input.

With current value of pointer, look for the sequence of residues of size SEED 
SIZE starting at the pointer in the Seeds slice.

  If no seed can be found, increment the pointer by 1 and go to Consume Input.
  Else, go to Try Match

Try Match
---------
Go to Extend Match.

  If no extended match of size MATCH SIZE is found
    Increment the pointer by 1 and go to Consume Input
  Else
    Create Link value with the match and add it to the slice of Link.
    Add residues proceding the last match to the residue preceding this match 
    to the Reference value. (XXX: +/- some number of residues?)
    Update the Seeds slice to reflect the residues added to the Reference value.
    Set the pointer to the first residue after the match (XXX: - some?)
    Go to Consume Input.

Extend Match
------------
Bandwidth allotment exceded.

